// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using kinder_care.Models;

#nullable disable

namespace kinder_care.Migrations
{
    [DbContext(typeof(KinderCareContext))]
    [Migration("20241125002036_RemoveEstadoAddPresente")]
    partial class RemoveEstadoAddPresente
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("kinder_care.Models.Actividades", b =>
                {
                    b.Property<int>("IdActividad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Actividad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdActividad"));

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int>("IdTipoActividad")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_actividad");

                    b.Property<string>("Lugar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lugar");

                    b.HasKey("IdActividad")
                        .HasName("PK__activida__071C9F95FDAD0639");

                    b.HasIndex("IdTipoActividad");

                    b.ToTable("actividades", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.Alergias", b =>
                {
                    b.Property<int>("IdAlergia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Alergia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAlergia"));

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("NombreAlergia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre_alergia");

                    b.HasKey("IdAlergia")
                        .HasName("PK__alergias__148C09CA3541F7AD");

                    b.ToTable("alergias", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.Asistencia", b =>
                {
                    b.Property<int>("IdAsistencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Asistencia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAsistencia"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha");

                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.Property<bool>("Presente")
                        .HasColumnType("bit")
                        .HasColumnName("presente");

                    b.HasKey("IdAsistencia")
                        .HasName("PK__asistenc__AFB810EF003C5B5E");

                    b.HasIndex(new[] { "IdNino" }, "idx_asistencia_nino");

                    b.ToTable("asistencia", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.CondicionesMedicas", b =>
                {
                    b.Property<int>("IdCondicionMedica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Condicion_medica");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCondicionMedica"));

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("NombreCondicion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre_condicion");

                    b.HasKey("IdCondicionMedica")
                        .HasName("PK__condicio__AF5CC79BA27B8280");

                    b.ToTable("condiciones_medicas", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.ContactosEmergencia", b =>
                {
                    b.Property<int>("IdContactoEmergencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Contacto_Emergencia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdContactoEmergencia"));

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("direccion");

                    b.Property<string>("NombreContacto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre_contacto");

                    b.Property<string>("Relacion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("relacion");

                    b.Property<int?>("Telefono")
                        .HasColumnType("int")
                        .HasColumnName("telefono");

                    b.HasKey("IdContactoEmergencia")
                        .HasName("PK__contacto__B407E9F29A28ED1F");

                    b.ToTable("contactos_emergencia", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.Docentes", b =>
                {
                    b.Property<int>("IdDocente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Docente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDocente"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("GrupoAsignado")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("grupo_asignado");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<DateTime?>("UltimaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ultima_actualizacion")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdDocente")
                        .HasName("PK__docentes__EBE50C3E0B7E379A");

                    b.HasIndex("IdUsuario");

                    b.ToTable("docentes", null, t =>
                        {
                            t.HasTrigger("trg_update_audit_docentes");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("kinder_care.Models.Evaluaciones", b =>
                {
                    b.Property<int>("IdEvaluacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Evaluacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvaluacion"));

                    b.Property<string>("Asignatura")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("asignatura");

                    b.Property<string>("Comentarios")
                        .HasColumnType("text")
                        .HasColumnName("comentarios");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.Property<decimal?>("Puntaje")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("puntaje");

                    b.Property<DateTime?>("UltimaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ultima_actualizacion")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdEvaluacion")
                        .HasName("PK__evaluaci__6E22DFF602DC711F");

                    b.HasIndex(new[] { "IdNino" }, "idx_evaluaciones_nino");

                    b.ToTable("evaluaciones", null, t =>
                        {
                            t.HasTrigger("trg_update_audit_evaluaciones");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("kinder_care.Models.ExpedienteCompletoNino", b =>
                {
                    b.Property<string>("Cedula")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cedula");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direccion");

                    b.Property<string>("Dosis")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dosis");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_Nino");

                    b.Property<string>("NombreAlergia")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre_alergia");

                    b.Property<string>("NombreCondicion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre_condicion");

                    b.Property<string>("NombreContacto")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre_contacto");

                    b.Property<string>("NombreMedicamento")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre_medicamento");

                    b.Property<string>("NombreNino")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre_nino");

                    b.Property<string>("Poliza")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("poliza");

                    b.Property<string>("RelacionContacto")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("relacion_contacto");

                    b.Property<string>("TelefonoContacto")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telefono_contacto");

                    b.ToTable((string)null);

                    b.ToView("vw_ExpedienteCompletoNino", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.Medicamentos", b =>
                {
                    b.Property<int>("IdMedicamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Medicamento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedicamento"));

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Dosis")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dosis");

                    b.Property<string>("NombreMedicamento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre_medicamento");

                    b.HasKey("IdMedicamento")
                        .HasName("PK__medicame__DA5E04EB0503C2D4");

                    b.ToTable("medicamentos", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.Ninos", b =>
                {
                    b.Property<int>("IdNino")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Nino");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNino"));

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cedula");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("NombreNino")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre_nino");

                    b.Property<string>("Poliza")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("poliza");

                    b.Property<DateTime?>("UltimaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ultima_actualizacion")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdNino")
                        .HasName("PK__ninos__3CAF0674B917C51C");

                    b.HasIndex(new[] { "NombreNino" }, "idx_ninos_nombre");

                    b.ToTable("ninos", null, t =>
                        {
                            t.HasTrigger("trg_update_audit_ninos");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("kinder_care.Models.ObservacionesDocentes", b =>
                {
                    b.Property<int>("IdObservacionDocente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Observacion_Docente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdObservacionDocente"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int>("IdDocente")
                        .HasColumnType("int")
                        .HasColumnName("id_docente");

                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo");

                    b.HasKey("IdObservacionDocente")
                        .HasName("PK__observac__FCB6ACAC58572707");

                    b.HasIndex("IdDocente");

                    b.HasIndex("IdNino");

                    b.ToTable("observaciones_docentes", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.Pagos", b =>
                {
                    b.Property<int>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Pago");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPago"));

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_pago");

                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.Property<int>("IdPadre")
                        .HasColumnType("int")
                        .HasColumnName("id_padre");

                    b.Property<int>("IdTipoPago")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_pago");

                    b.Property<string>("MetodoPago")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("metodo_pago");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("monto");

                    b.Property<string>("ReferenciaFactura")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("referencia_factura");

                    b.Property<DateTime?>("UltimaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ultima_actualizacion")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdPago")
                        .HasName("PK__pagos__2A3B86B22059D92F");

                    b.HasIndex("IdNino");

                    b.HasIndex("IdTipoPago");

                    b.HasIndex(new[] { "IdPadre" }, "idx_pagos_padre");

                    b.ToTable("pagos", null, t =>
                        {
                            t.HasTrigger("trg_update_audit_pagos");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("kinder_care.Models.ProgresoAcademico", b =>
                {
                    b.Property<int>("IdProgresoAcademico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Progreso_Academico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProgresoAcademico"));

                    b.Property<string>("AreaAcademica")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("area_academica");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.Property<string>("NivelProgreso")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nivel_progreso");

                    b.Property<DateTime?>("UltimaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ultima_actualizacion")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdProgresoAcademico")
                        .HasName("PK__progreso__20F2A38CE3214FF3");

                    b.HasIndex("IdNino");

                    b.ToTable("progreso_academico", null, t =>
                        {
                            t.HasTrigger("trg_update_audit_progreso_academico");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("kinder_care.Models.RelDocenteNinoMateria", b =>
                {
                    b.Property<int>("IdDocente")
                        .HasColumnType("int")
                        .HasColumnName("id_docente");

                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.HasKey("IdDocente", "IdNino")
                        .HasName("PK__rel_doce__42BD208A0B7446B8");

                    b.HasIndex("IdNino");

                    b.ToTable("rel_docente_nino_materia", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.RelNinoActividad", b =>
                {
                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.Property<int>("IdActividad")
                        .HasColumnType("int")
                        .HasColumnName("id_actividad");

                    b.Property<string>("Asistencia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("asistencia");

                    b.HasKey("IdNino", "IdActividad")
                        .HasName("PK__rel_nino__06C41D3E23CF66C7");

                    b.HasIndex("IdActividad");

                    b.ToTable("rel_nino_actividad", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.RelNinoAlergia", b =>
                {
                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.Property<int>("IdAlergia")
                        .HasColumnType("int")
                        .HasColumnName("id_alergia");

                    b.HasKey("IdNino", "IdAlergia");

                    b.HasIndex("IdAlergia");

                    b.ToTable("rel_nino_alergia", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.RelNinoCondicion", b =>
                {
                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.Property<int>("IdCondicion")
                        .HasColumnType("int")
                        .HasColumnName("id_condicion");

                    b.HasKey("IdNino", "IdCondicion");

                    b.HasIndex("IdCondicion");

                    b.ToTable("rel_nino_condicion", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.RelNinoContactoEmergencia", b =>
                {
                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.Property<int>("IdContacto")
                        .HasColumnType("int")
                        .HasColumnName("id_contacto");

                    b.HasKey("IdNino", "IdContacto");

                    b.HasIndex("IdContacto");

                    b.ToTable("rel_nino_contacto_emergencia", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.RelNinoMedicamento", b =>
                {
                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.Property<int>("IdMedicamento")
                        .HasColumnType("int")
                        .HasColumnName("id_medicamento");

                    b.HasKey("IdNino", "IdMedicamento");

                    b.HasIndex("IdMedicamento");

                    b.ToTable("rel_nino_medicamento", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.RelPadresNinos", b =>
                {
                    b.Property<int>("IdPadre")
                        .HasColumnType("int")
                        .HasColumnName("id_padre");

                    b.Property<int>("IdNino")
                        .HasColumnType("int")
                        .HasColumnName("id_nino");

                    b.Property<string>("Relacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("relacion");

                    b.HasKey("IdPadre", "IdNino")
                        .HasName("PK__rel_padr__42228E4E09B5059C");

                    b.HasIndex(new[] { "IdNino" }, "idx_rel_padres_ninos_nino");

                    b.ToTable("rel_padres_ninos", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.Roles", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Rol");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("IdRol")
                        .HasName("PK__roles__76482FD2122BF699");

                    b.HasIndex(new[] { "Nombre" }, "UQ__roles__72AFBCC692ECDCF1")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.TipoActividad", b =>
                {
                    b.Property<int>("IdTipoActividad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Tipo_Actividad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoActividad"));

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("NombreTipoActividad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre_tipo_actividad");

                    b.HasKey("IdTipoActividad")
                        .HasName("PK__tipo_act__03B324327EFE116E");

                    b.HasIndex(new[] { "NombreTipoActividad" }, "UQ__tipo_act__717F08BCA36A2042")
                        .IsUnique();

                    b.ToTable("tipo_actividad", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.TipoPagos", b =>
                {
                    b.Property<int>("IdTipoPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_pago");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoPago"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("NombreTipoPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre_tipo_pago");

                    b.HasKey("IdTipoPago")
                        .HasName("PK__tipo_pag__F7E781E5D145505F");

                    b.HasIndex(new[] { "NombreTipoPago" }, "UQ__tipo_pag__3E5147E208217D9B")
                        .IsUnique();

                    b.ToTable("tipo_pagos", (string)null);
                });

            modelBuilder.Entity("kinder_care.Models.Usuarios", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_Usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cedula");

                    b.Property<string>("ContrasenaHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contrasena_hash");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("correo_electronico");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("id_rol");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<int>("NumTelefono")
                        .HasColumnType("int")
                        .HasColumnName("num_Telefono");

                    b.Property<string>("TokenRecovery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UltimaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ultima_actualizacion")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdUsuario")
                        .HasName("PK__usuarios__8E901EAA42E54E3E");

                    b.HasIndex(new[] { "IdRol" }, "idx_usuarios_rol");

                    b.ToTable("usuarios", null, t =>
                        {
                            t.HasTrigger("trg_insert_docente");

                            t.HasTrigger("trg_update_Rol_Docente");

                            t.HasTrigger("trg_update_audit_usuarios");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("kinder_care.Models.Actividades", b =>
                {
                    b.HasOne("kinder_care.Models.TipoActividad", "IdTipoActividadNavigation")
                        .WithMany("Actividades")
                        .HasForeignKey("IdTipoActividad")
                        .IsRequired()
                        .HasConstraintName("FK__actividad__id_ti__02FC7413");

                    b.Navigation("IdTipoActividadNavigation");
                });

            modelBuilder.Entity("kinder_care.Models.Asistencia", b =>
                {
                    b.HasOne("kinder_care.Models.Ninos", "IdNinoNavigation")
                        .WithMany("Asistencia")
                        .HasForeignKey("IdNino")
                        .IsRequired()
                        .HasConstraintName("fk_asistencia_nino");

                    b.Navigation("IdNinoNavigation");
                });

            modelBuilder.Entity("kinder_care.Models.Docentes", b =>
                {
                    b.HasOne("kinder_care.Models.Usuarios", "IdUsuarioNavigation")
                        .WithMany("Docentes")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("fk_docentes_usuario");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("kinder_care.Models.Evaluaciones", b =>
                {
                    b.HasOne("kinder_care.Models.Ninos", "IdNinoNavigation")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("IdNino")
                        .IsRequired()
                        .HasConstraintName("fk_evaluaciones_nino");

                    b.Navigation("IdNinoNavigation");
                });

            modelBuilder.Entity("kinder_care.Models.ObservacionesDocentes", b =>
                {
                    b.HasOne("kinder_care.Models.Docentes", "IdDocenteNavigation")
                        .WithMany("ObservacionesDocentes")
                        .HasForeignKey("IdDocente")
                        .IsRequired()
                        .HasConstraintName("fk_observacion_docente");

                    b.HasOne("kinder_care.Models.Ninos", "IdNinoNavigation")
                        .WithMany("ObservacionesDocentes")
                        .HasForeignKey("IdNino")
                        .IsRequired()
                        .HasConstraintName("fk_observacion_nino");

                    b.Navigation("IdDocenteNavigation");

                    b.Navigation("IdNinoNavigation");
                });

            modelBuilder.Entity("kinder_care.Models.Pagos", b =>
                {
                    b.HasOne("kinder_care.Models.Ninos", "Nino")
                        .WithMany("Pagos")
                        .HasForeignKey("IdNino")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("kinder_care.Models.Usuarios", "Padre")
                        .WithMany("Pagos")
                        .HasForeignKey("IdPadre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("kinder_care.Models.TipoPagos", "TipoPago")
                        .WithMany("Pagos")
                        .HasForeignKey("IdTipoPago")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nino");

                    b.Navigation("Padre");

                    b.Navigation("TipoPago");
                });

            modelBuilder.Entity("kinder_care.Models.ProgresoAcademico", b =>
                {
                    b.HasOne("kinder_care.Models.Ninos", "IdNinoNavigation")
                        .WithMany("ProgresoAcademico")
                        .HasForeignKey("IdNino")
                        .IsRequired()
                        .HasConstraintName("fk_progreso_nino");

                    b.Navigation("IdNinoNavigation");
                });

            modelBuilder.Entity("kinder_care.Models.RelDocenteNinoMateria", b =>
                {
                    b.HasOne("kinder_care.Models.Docentes", "IdDocenteNavigation")
                        .WithMany("RelDocenteNinoMateria")
                        .HasForeignKey("IdDocente")
                        .IsRequired()
                        .HasConstraintName("FK__rel_docen__id_do__5FB337D6");

                    b.HasOne("kinder_care.Models.Ninos", "IdNinoNavigation")
                        .WithMany("RelDocenteNinoMateria")
                        .HasForeignKey("IdNino")
                        .IsRequired()
                        .HasConstraintName("FK__rel_docen__id_ni__60A75C0F");

                    b.Navigation("IdDocenteNavigation");

                    b.Navigation("IdNinoNavigation");
                });

            modelBuilder.Entity("kinder_care.Models.RelNinoActividad", b =>
                {
                    b.HasOne("kinder_care.Models.Actividades", "IdActividadNavigation")
                        .WithMany("RelNinoActividad")
                        .HasForeignKey("IdActividad")
                        .IsRequired()
                        .HasConstraintName("FK__rel_nino___id_ac__07C12930");

                    b.HasOne("kinder_care.Models.Ninos", "IdNinoNavigation")
                        .WithMany("RelNinoActividad")
                        .HasForeignKey("IdNino")
                        .IsRequired()
                        .HasConstraintName("FK__rel_nino___id_ni__06CD04F7");

                    b.Navigation("IdActividadNavigation");

                    b.Navigation("IdNinoNavigation");
                });

            modelBuilder.Entity("kinder_care.Models.RelNinoAlergia", b =>
                {
                    b.HasOne("kinder_care.Models.Alergias", "Alergia")
                        .WithMany("RelNinoAlergia")
                        .HasForeignKey("IdAlergia")
                        .IsRequired();

                    b.HasOne("kinder_care.Models.Ninos", "Nino")
                        .WithMany("RelNinoAlergia")
                        .HasForeignKey("IdNino")
                        .IsRequired();

                    b.Navigation("Alergia");

                    b.Navigation("Nino");
                });

            modelBuilder.Entity("kinder_care.Models.RelNinoCondicion", b =>
                {
                    b.HasOne("kinder_care.Models.CondicionesMedicas", "Condicion")
                        .WithMany("RelNinoCondicion")
                        .HasForeignKey("IdCondicion")
                        .IsRequired();

                    b.HasOne("kinder_care.Models.Ninos", "Nino")
                        .WithMany("RelNinoCondicion")
                        .HasForeignKey("IdNino")
                        .IsRequired();

                    b.Navigation("Condicion");

                    b.Navigation("Nino");
                });

            modelBuilder.Entity("kinder_care.Models.RelNinoContactoEmergencia", b =>
                {
                    b.HasOne("kinder_care.Models.ContactosEmergencia", "ContactoEmergencia")
                        .WithMany("RelNinoContactoEmergencia")
                        .HasForeignKey("IdContacto")
                        .IsRequired();

                    b.HasOne("kinder_care.Models.Ninos", "Nino")
                        .WithMany("RelNinoContactoEmergencia")
                        .HasForeignKey("IdNino")
                        .IsRequired();

                    b.Navigation("ContactoEmergencia");

                    b.Navigation("Nino");
                });

            modelBuilder.Entity("kinder_care.Models.RelNinoMedicamento", b =>
                {
                    b.HasOne("kinder_care.Models.Medicamentos", "Medicamento")
                        .WithMany("RelNinoMedicamento")
                        .HasForeignKey("IdMedicamento")
                        .IsRequired();

                    b.HasOne("kinder_care.Models.Ninos", "Nino")
                        .WithMany("RelNinoMedicamento")
                        .HasForeignKey("IdNino")
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Nino");
                });

            modelBuilder.Entity("kinder_care.Models.RelPadresNinos", b =>
                {
                    b.HasOne("kinder_care.Models.Ninos", "IdNinoNavigation")
                        .WithMany("RelPadresNinos")
                        .HasForeignKey("IdNino")
                        .IsRequired()
                        .HasConstraintName("fk_padres_ninos_nino");

                    b.HasOne("kinder_care.Models.Usuarios", "IdPadreNavigation")
                        .WithMany("RelPadresNinos")
                        .HasForeignKey("IdPadre")
                        .IsRequired()
                        .HasConstraintName("fk_padres_ninos_padre");

                    b.Navigation("IdNinoNavigation");

                    b.Navigation("IdPadreNavigation");
                });

            modelBuilder.Entity("kinder_care.Models.Usuarios", b =>
                {
                    b.HasOne("kinder_care.Models.Roles", "IdRolNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .IsRequired()
                        .HasConstraintName("fk_usuarios_rol");

                    b.Navigation("IdRolNavigation");
                });

            modelBuilder.Entity("kinder_care.Models.Actividades", b =>
                {
                    b.Navigation("RelNinoActividad");
                });

            modelBuilder.Entity("kinder_care.Models.Alergias", b =>
                {
                    b.Navigation("RelNinoAlergia");
                });

            modelBuilder.Entity("kinder_care.Models.CondicionesMedicas", b =>
                {
                    b.Navigation("RelNinoCondicion");
                });

            modelBuilder.Entity("kinder_care.Models.ContactosEmergencia", b =>
                {
                    b.Navigation("RelNinoContactoEmergencia");
                });

            modelBuilder.Entity("kinder_care.Models.Docentes", b =>
                {
                    b.Navigation("ObservacionesDocentes");

                    b.Navigation("RelDocenteNinoMateria");
                });

            modelBuilder.Entity("kinder_care.Models.Medicamentos", b =>
                {
                    b.Navigation("RelNinoMedicamento");
                });

            modelBuilder.Entity("kinder_care.Models.Ninos", b =>
                {
                    b.Navigation("Asistencia");

                    b.Navigation("Evaluaciones");

                    b.Navigation("ObservacionesDocentes");

                    b.Navigation("Pagos");

                    b.Navigation("ProgresoAcademico");

                    b.Navigation("RelDocenteNinoMateria");

                    b.Navigation("RelNinoActividad");

                    b.Navigation("RelNinoAlergia");

                    b.Navigation("RelNinoCondicion");

                    b.Navigation("RelNinoContactoEmergencia");

                    b.Navigation("RelNinoMedicamento");

                    b.Navigation("RelPadresNinos");
                });

            modelBuilder.Entity("kinder_care.Models.Roles", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("kinder_care.Models.TipoActividad", b =>
                {
                    b.Navigation("Actividades");
                });

            modelBuilder.Entity("kinder_care.Models.TipoPagos", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("kinder_care.Models.Usuarios", b =>
                {
                    b.Navigation("Docentes");

                    b.Navigation("Pagos");

                    b.Navigation("RelPadresNinos");
                });
#pragma warning restore 612, 618
        }
    }
}
